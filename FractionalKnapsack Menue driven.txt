/* C++ program to solve fractional Knapsack Problem */ 
#include <bits/stdc++.h> 

using namespace std; 

// Structure for an item which stores weight and 
// corresponding value of Item 

struct Item 
{ 
	int value, weight; 

	// Constructor 
	Item(int value, int weight) 
		: value(value) 
		, weight(weight) 
	{ 
	} 
}; 

// Comparison function to sort Item according to val/weight 
// ratio 
bool cmp(struct Item a, struct Item b) 
{ 
	double r1 = (double)a.value / (double)a.weight; 
	double r2 = (double)b.value / (double)b.weight; 
	return r1 > r2; 
} 

// Main greedy function to solve problem by ratio of val/weight.
double fractionalKnapsack_ratio(int W, struct Item arr[], int n) 
{ 
	// sorting Item on basis of ratio 
	sort(arr, arr + n, cmp); 

	int curWeight = 0; // Current weight in knapsack 
	double finalvalue = 0.0; // Result (value in Knapsack) 

	// Looping through all Items 
	for (int i = 0; i < n; i++) 
	{ 
		// If adding Item won't overflow, add it completely 
		if (curWeight + arr[i].weight <= W) 
		{ 
			curWeight += arr[i].weight; 
			finalvalue += arr[i].value; 
		} 

		// If we can't add current Item, add fractional part 
		// of it 
		else
		{ 
			int remain = W - curWeight; 
			finalvalue 
				+= arr[i].value 
				* ((double)remain / (double)arr[i].weight); 
			break; 
		} 
	} 

	// Returning final value 
	return finalvalue; 
} 



bool cmp_p(struct Item a, struct Item b) 
{ 
	return a.value > b.value; 
} 
// Main greedy function to solve problem by profit.
double fractionalKnapsack_profit(int W, struct Item arr[], int n) 
{ 
	// sorting Item on basis of ratio 
	sort(arr, arr + n, cmp_p); 

	int curWeight = 0; // Current weight in knapsack 
	double finalvalue = 0.0; // Result (value in Knapsack) 

	// Looping through all Items 
	for (int i = 0; i < n; i++) 
	{ 
		// If adding Item won't overflow, add it completely 
		if (curWeight + arr[i].weight <= W) 
		{ 
			curWeight += arr[i].weight; 
			finalvalue += arr[i].value; 
		} 

		// If we can't add current Item, add fractional part 
		// of it 
		else
		{ 
			int remain = W - curWeight; 
			finalvalue 
				+= arr[i].value 
				* ((double)remain / (double)arr[i].weight); 
			break; 
		} 
	} 

	// Returning final value 
	return finalvalue; 
} 



bool cmp_w(struct Item a, struct Item b) 
{ 
	return a.weight > b.weight; 
}
// Main greedy function to solve problem by weight.
double fractionalKnapsack_weight(int W, struct Item arr[], int n) 
{ 
	// sorting Item on basis of ratio 
	sort(arr, arr + n, cmp_w); 
	
	int curWeight = 0; // Current weight in knapsack 
	double finalvalue = 0.0; // Result (value in Knapsack) 

	// Looping through all Items 
	for (int i = 0; i < n; i++) 
	{ 
		// If adding Item won't overflow, add it completely 
		if (curWeight + arr[i].weight <= W) 
		{ 
			curWeight += arr[i].weight; 
			finalvalue += arr[i].value; 
		} 

		// If we can't add current Item, add fractional part 
		// of it 
		else
		{ 
			int remain = W - curWeight; 
			finalvalue 
				+= arr[i].value 
				* ((double)remain / (double)arr[i].weight); 
			break; 
		} 
	} 

	// Returning final value 
	return finalvalue; 
} 





// Driver code 
int main() 
{ 
	int W = 50, choice; // Weight of knapsack 
	Item arr[] = { { 60, 10 }, { 100, 20 }, { 120, 30 } }; 

	int n = sizeof(arr) / sizeof(arr[0]); 
    cout<<"Enter the number for fractional knapsack :\n 1. By ratio, \n 2. By profit, \n 3. By weights, \n 4. Exit";
	cin>>choice;
	switch(choice)
	{
	    case 1:  cout << "\nMaximum value we can obtain by ratio = "<< fractionalKnapsack_ratio(W, arr, n); 
                 break;
	    case 2:  cout << "\nMaximum value we can obtain by profit = "<< fractionalKnapsack_profit(W, arr, n); 
                 break;
	    case 3:  cout << "\nMaximum value we can obtain by weights = "<< fractionalKnapsack_weight(W, arr, n); 
                 break;
	    case 4:  cout << "\nExiting from the program "; 
                 break;
	    default : cout<<"\nWrong choice.";
                  break;
	}
	return 0; 
}
